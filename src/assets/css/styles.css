@charset "UTF-8";
/*------------------------------------*    $CSSWIZARDRY-GRIDS
\*------------------------------------*/
/**
 * CONTENTS
 * INTRODUCTION.........How the grid system works.
 * VARIABLES............Your settings.
 * MIXINS...............Library mixins.
 * GRID SETUP...........Build the grid structure.
 * WIDTHS...............Build our responsive widths around our breakpoints.
 * PUSH.................Push classes.
 * PULL.................Pull classes.
 */
/*------------------------------------*    $INTRODUCTION
\*------------------------------------*/
/**
 * csswizardry grids provides you with widths to suit a number of breakpoints
 * designed around devices of a size you specify. Out of the box, csswizardry
 * grids caters to the following types of device:
 *
 * palm     --  palm-based devices, like phones and small tablets
 * lap      --  lap-based devices, like iPads or laptops
 * portable --  all of the above
 * desk     --  stationary devices, like desktop computers
 * regular  --  any/all types of device
 *
 * These namespaces are then used in the library to give you the ability to
 * manipulate your layouts based around them, for example:
 *
   <div class="grid__item  one-whole  lap--one-half  desk--one-third">
 *
 * This would give you a grid item which is 100% width unless it is on a lap
 * device, at which point it become 50% wide, or it is on a desktop device, at
 * which point it becomes 33.333% width.
 *
 * csswizardry grids also has push and pull classes which allow you to nudge
 * grid items left and right by a defined amount. These follow the same naming
 * convention as above, but are prepended by either `push--` or `pull--`, for
 * example:
 *
   `class="grid__item  one-half  push--one-half"`
 *
 * This would give you a grid item which is 50% width and pushed over to the
 * right by 50%.
 *
 * All classes in csswizardry grids follow this patten, so you should fairly
 * quickly be able to piece together any combinations you can imagine, for
 * example:
 *
   `class="grid__item  one-whole  lap--one-half  desk--one-third  push--desk--one-third"`
 *
   `class="grid__item  one-quarter  palm--one-half  push--palm--one-half"`
 *
   `class="grid__item  palm--one-third  desk--five-twelfths"`
 */
/*------------------------------------*    $VARIABLES
\*------------------------------------*/
/**
 * If you are building a non-responsive site but would still like to use
 * csswizardry-grids, set this to ‘false’:
 */
/**
 * Is this build mobile first? Setting to ‘true’ means that all grids will be
 * 100% width if you do not apply a more specific class to them.
 */
/**
 * Set the spacing between your grid items.
 */
/**
 * Would you like Sass’ silent classes, or regular CSS classes?
 */
/**
 * Would you like push and pull classes enabled?
 */
/**
 * Using `inline-block` means that the grid items need their whitespace removing
 * in order for them to work correctly. Set the following to true if you are
 * going to achieve this by manually removing/commenting out any whitespace in
 * your HTML yourself.
 *
 * Setting this to false invokes a hack which cannot always be guaranteed,
 * please see the following for more detail:
 *
 * github.com/csswizardry/csswizardry-grids/commit/744d4b23c9d2b77d605b5991e54a397df72e0688
 * github.com/csswizardry/inuit.css/issues/170#issuecomment-14859371
 */
/**
 * Define your breakpoints. The first value is the prefix that shall be used for
 * your classes (e.g. `.palm--one-half`), the second value is the media query
 * that the breakpoint fires at.
 */
/**
 * Define which namespaced breakpoints you would like to generate for each of
 * widths, push and pull. This is handy if you only need pull on, say, desk, or
 * you only need a new width breakpoint at mobile sizes. It allows you to only
 * compile as much CSS as you need. All are turned on by default, but you can
 * add and remove breakpoints at will.
 *
 * Push and pull shall only be used if `$push` and/or `$pull` and `$responsive`
 * have been set to ‘true’.
 */
/**
 * You do not need to edit anything from this line onward; csswizardry-grids is
 * good to go. Happy griddin’!
 */
/*------------------------------------*    $MIXINS
\*------------------------------------*/
/**
 * These mixins are for the library to use only, you should not need to modify
 * them at all.
 *
 * Enclose a block of code with a media query as named in `$breakpoints`.
 */
/**
 * Drop relative positioning into silent classes which can’t take advantage of
 * the `[class*="push--"]` and `[class*="pull--"]` selectors.
 */
/*------------------------------------*    $GRID SETUP
\*------------------------------------*/
/**
 * 1. Allow the grid system to be used on lists.
 * 2. Remove any margins and paddings that might affect the grid system.
 * 3. Apply a negative `margin-left` to negate the columns’ gutters.
 */
.grid {
  list-style: none;
  /* [1] */
  margin: 0;
  /* [2] */
  padding: 0;
  /* [2] */
  margin-left: -24px;
  /* [3] */ }

/**
     * 1. Cause columns to stack side-by-side.
     * 2. Space columns apart.
     * 3. Align columns to the tops of each other.
     * 4. Full-width unless told to behave otherwise.
     * 5. Required to combine fluid widths and fixed gutters.
     */
.grid__item {
  display: inline-block;
  /* [1] */
  padding-left: 24px;
  /* [2] */
  vertical-align: top;
  /* [3] */
  width: 100%;
  /* [4] */
  -webkit-box-sizing: border-box;
  /* [5] */
  -moz-box-sizing: border-box;
  /* [5] */
  box-sizing: border-box;
  /* [5] */ }

/**
 * Reversed grids allow you to structure your source in the opposite order to
 * how your rendered layout will appear. Extends `.grid`.
 */
.grid--rev {
  direction: rtl;
  text-align: left; }
  .grid--rev > .grid__item {
    direction: ltr;
    text-align: left; }

/**
 * Gutterless grids have all the properties of regular grids, minus any spacing.
 * Extends `.grid`.
 */
.grid--full {
  margin-left: 0; }
  .grid--full > .grid__item {
    padding-left: 0; }

/**
 * Align the entire grid to the right. Extends `.grid`.
 */
.grid--right {
  text-align: right; }
  .grid--right > .grid__item {
    text-align: left; }

/**
 * Centered grids align grid items centrally without needing to use push or pull
 * classes. Extends `.grid`.
 */
.grid--center {
  text-align: center; }
  .grid--center > .grid__item {
    text-align: left; }

/**
 * Align grid cells vertically (`.grid--middle` or `.grid--bottom`). Extends
 * `.grid`.
 */
.grid--middle > .grid__item {
  vertical-align: middle; }

.grid--bottom > .grid__item {
  vertical-align: bottom; }

/**
 * Create grids with narrower gutters. Extends `.grid`.
 */
.grid--narrow {
  margin-left: -12px; }
  .grid--narrow > .grid__item {
    padding-left: 12px; }

/**
 * Create grids with wider gutters. Extends `.grid`.
 */
.grid--wide {
  margin-left: -48px; }
  .grid--wide > .grid__item {
    padding-left: 48px; }

/*------------------------------------*    $WIDTHS
\*------------------------------------*/
/**
 * Create our width classes, prefixed by the specified namespace.
 */
/**
 * Our regular, non-responsive width classes.
 */
/**
     * Whole
     */
.one-whole {
  width: 100%; }

/**
     * Halves
     */
.one-half, .two-quarters, .three-sixths, .four-eighths, .five-tenths, .six-twelfths {
  width: 50%; }

/**
     * Thirds
     */
.one-third, .two-sixths, .four-twelfths {
  width: 33.333%; }

.two-thirds, .four-sixths, .eight-twelfths {
  width: 66.666%; }

/**
     * Quarters
     */
.one-quarter, .two-eighths, .three-twelfths {
  width: 25%; }

.three-quarters, .six-eighths, .nine-twelfths {
  width: 75%; }

/**
     * Fifths
     */
.one-fifth, .two-tenths {
  width: 20%; }

.two-fifths, .four-tenths {
  width: 40%; }

.three-fifths, .six-tenths {
  width: 60%; }

.four-fifths, .eight-tenths {
  width: 80%; }

/**
     * Sixths
     */
.one-sixth, .two-twelfths {
  width: 16.666%; }

.five-sixths, .ten-twelfths {
  width: 83.333%; }

/**
     * Eighths
     */
.one-eighth {
  width: 12.5%; }

.three-eighths {
  width: 37.5%; }

.five-eighths {
  width: 62.5%; }

.seven-eighths {
  width: 87.5%; }

/**
     * Tenths
     */
.one-tenth {
  width: 10%; }

.three-tenths {
  width: 30%; }

.seven-tenths {
  width: 70%; }

.nine-tenths {
  width: 90%; }

/**
     * Twelfths
     */
.one-twelfth {
  width: 8.333%; }

.five-twelfths {
  width: 41.666%; }

.seven-twelfths {
  width: 58.333%; }

.eleven-twelfths {
  width: 91.666%; }

/**
 * Our responsive classes, if we have enabled them.
 */
@media only screen and (max-width: 480px) {
  /**
     * Whole
     */
  .palm--one-whole {
    width: 100%; }
  /**
     * Halves
     */
  .palm--one-half, .palm--two-quarters, .palm--three-sixths, .palm--four-eighths, .palm--five-tenths, .palm--six-twelfths {
    width: 50%; }
  /**
     * Thirds
     */
  .palm--one-third, .palm--two-sixths, .palm--four-twelfths {
    width: 33.333%; }
  .palm--two-thirds, .palm--four-sixths, .palm--eight-twelfths {
    width: 66.666%; }
  /**
     * Quarters
     */
  .palm--one-quarter, .palm--two-eighths, .palm--three-twelfths {
    width: 25%; }
  .palm--three-quarters, .palm--six-eighths, .palm--nine-twelfths {
    width: 75%; }
  /**
     * Fifths
     */
  .palm--one-fifth, .palm--two-tenths {
    width: 20%; }
  .palm--two-fifths, .palm--four-tenths {
    width: 40%; }
  .palm--three-fifths, .palm--six-tenths {
    width: 60%; }
  .palm--four-fifths, .palm--eight-tenths {
    width: 80%; }
  /**
     * Sixths
     */
  .palm--one-sixth, .palm--two-twelfths {
    width: 16.666%; }
  .palm--five-sixths, .palm--ten-twelfths {
    width: 83.333%; }
  /**
     * Eighths
     */
  .palm--one-eighth {
    width: 12.5%; }
  .palm--three-eighths {
    width: 37.5%; }
  .palm--five-eighths {
    width: 62.5%; }
  .palm--seven-eighths {
    width: 87.5%; }
  /**
     * Tenths
     */
  .palm--one-tenth {
    width: 10%; }
  .palm--three-tenths {
    width: 30%; }
  .palm--seven-tenths {
    width: 70%; }
  .palm--nine-tenths {
    width: 90%; }
  /**
     * Twelfths
     */
  .palm--one-twelfth {
    width: 8.333%; }
  .palm--five-twelfths {
    width: 41.666%; }
  .palm--seven-twelfths {
    width: 58.333%; }
  .palm--eleven-twelfths {
    width: 91.666%; } }

@media only screen and (min-width: 481px) and (max-width: 1023px) {
  /**
     * Whole
     */
  .lap--one-whole {
    width: 100%; }
  /**
     * Halves
     */
  .lap--one-half, .lap--two-quarters, .lap--three-sixths, .lap--four-eighths, .lap--five-tenths, .lap--six-twelfths {
    width: 50%; }
  /**
     * Thirds
     */
  .lap--one-third, .lap--two-sixths, .lap--four-twelfths {
    width: 33.333%; }
  .lap--two-thirds, .lap--four-sixths, .lap--eight-twelfths {
    width: 66.666%; }
  /**
     * Quarters
     */
  .lap--one-quarter, .lap--two-eighths, .lap--three-twelfths {
    width: 25%; }
  .lap--three-quarters, .lap--six-eighths, .lap--nine-twelfths {
    width: 75%; }
  /**
     * Fifths
     */
  .lap--one-fifth, .lap--two-tenths {
    width: 20%; }
  .lap--two-fifths, .lap--four-tenths {
    width: 40%; }
  .lap--three-fifths, .lap--six-tenths {
    width: 60%; }
  .lap--four-fifths, .lap--eight-tenths {
    width: 80%; }
  /**
     * Sixths
     */
  .lap--one-sixth, .lap--two-twelfths {
    width: 16.666%; }
  .lap--five-sixths, .lap--ten-twelfths {
    width: 83.333%; }
  /**
     * Eighths
     */
  .lap--one-eighth {
    width: 12.5%; }
  .lap--three-eighths {
    width: 37.5%; }
  .lap--five-eighths {
    width: 62.5%; }
  .lap--seven-eighths {
    width: 87.5%; }
  /**
     * Tenths
     */
  .lap--one-tenth {
    width: 10%; }
  .lap--three-tenths {
    width: 30%; }
  .lap--seven-tenths {
    width: 70%; }
  .lap--nine-tenths {
    width: 90%; }
  /**
     * Twelfths
     */
  .lap--one-twelfth {
    width: 8.333%; }
  .lap--five-twelfths {
    width: 41.666%; }
  .lap--seven-twelfths {
    width: 58.333%; }
  .lap--eleven-twelfths {
    width: 91.666%; } }

@media only screen and (max-width: 1023px) {
  /**
     * Whole
     */
  .portable--one-whole {
    width: 100%; }
  /**
     * Halves
     */
  .portable--one-half, .portable--two-quarters, .portable--three-sixths, .portable--four-eighths, .portable--five-tenths, .portable--six-twelfths {
    width: 50%; }
  /**
     * Thirds
     */
  .portable--one-third, .portable--two-sixths, .portable--four-twelfths {
    width: 33.333%; }
  .portable--two-thirds, .portable--four-sixths, .portable--eight-twelfths {
    width: 66.666%; }
  /**
     * Quarters
     */
  .portable--one-quarter, .portable--two-eighths, .portable--three-twelfths {
    width: 25%; }
  .portable--three-quarters, .portable--six-eighths, .portable--nine-twelfths {
    width: 75%; }
  /**
     * Fifths
     */
  .portable--one-fifth, .portable--two-tenths {
    width: 20%; }
  .portable--two-fifths, .portable--four-tenths {
    width: 40%; }
  .portable--three-fifths, .portable--six-tenths {
    width: 60%; }
  .portable--four-fifths, .portable--eight-tenths {
    width: 80%; }
  /**
     * Sixths
     */
  .portable--one-sixth, .portable--two-twelfths {
    width: 16.666%; }
  .portable--five-sixths, .portable--ten-twelfths {
    width: 83.333%; }
  /**
     * Eighths
     */
  .portable--one-eighth {
    width: 12.5%; }
  .portable--three-eighths {
    width: 37.5%; }
  .portable--five-eighths {
    width: 62.5%; }
  .portable--seven-eighths {
    width: 87.5%; }
  /**
     * Tenths
     */
  .portable--one-tenth {
    width: 10%; }
  .portable--three-tenths {
    width: 30%; }
  .portable--seven-tenths {
    width: 70%; }
  .portable--nine-tenths {
    width: 90%; }
  /**
     * Twelfths
     */
  .portable--one-twelfth {
    width: 8.333%; }
  .portable--five-twelfths {
    width: 41.666%; }
  .portable--seven-twelfths {
    width: 58.333%; }
  .portable--eleven-twelfths {
    width: 91.666%; } }

@media only screen and (min-width: 1024px) {
  /**
     * Whole
     */
  .desk--one-whole {
    width: 100%; }
  /**
     * Halves
     */
  .desk--one-half, .desk--two-quarters, .desk--three-sixths, .desk--four-eighths, .desk--five-tenths, .desk--six-twelfths {
    width: 50%; }
  /**
     * Thirds
     */
  .desk--one-third, .desk--two-sixths, .desk--four-twelfths {
    width: 33.333%; }
  .desk--two-thirds, .desk--four-sixths, .desk--eight-twelfths {
    width: 66.666%; }
  /**
     * Quarters
     */
  .desk--one-quarter, .desk--two-eighths, .desk--three-twelfths {
    width: 25%; }
  .desk--three-quarters, .desk--six-eighths, .desk--nine-twelfths {
    width: 75%; }
  /**
     * Fifths
     */
  .desk--one-fifth, .desk--two-tenths {
    width: 20%; }
  .desk--two-fifths, .desk--four-tenths {
    width: 40%; }
  .desk--three-fifths, .desk--six-tenths {
    width: 60%; }
  .desk--four-fifths, .desk--eight-tenths {
    width: 80%; }
  /**
     * Sixths
     */
  .desk--one-sixth, .desk--two-twelfths {
    width: 16.666%; }
  .desk--five-sixths, .desk--ten-twelfths {
    width: 83.333%; }
  /**
     * Eighths
     */
  .desk--one-eighth {
    width: 12.5%; }
  .desk--three-eighths {
    width: 37.5%; }
  .desk--five-eighths {
    width: 62.5%; }
  .desk--seven-eighths {
    width: 87.5%; }
  /**
     * Tenths
     */
  .desk--one-tenth {
    width: 10%; }
  .desk--three-tenths {
    width: 30%; }
  .desk--seven-tenths {
    width: 70%; }
  .desk--nine-tenths {
    width: 90%; }
  /**
     * Twelfths
     */
  .desk--one-twelfth {
    width: 8.333%; }
  .desk--five-twelfths {
    width: 41.666%; }
  .desk--seven-twelfths {
    width: 58.333%; }
  .desk--eleven-twelfths {
    width: 91.666%; } }

/*------------------------------------*    $PUSH
\*------------------------------------*/
/**
 * Push classes, to move grid items over to the right by certain amounts.
 */
/*------------------------------------*    $PULL
\*------------------------------------*/
/**
 * Pull classes, to move grid items back to the left by certain amounts.
 */
/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"], input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */ }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

/*# sourceMappingURL=data:application/json;base64, */